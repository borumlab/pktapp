geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
+ geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q1), colour="#990000", linetype="dashed") #q3
+ geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q3), colour="#990000", linetype="dashed") #q2
}
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))+
geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q1), colour="#990000", linetype="dashed")+ #q3
geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q3), colour="#990000", linetype="dashed") #q2
}
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q1), colour="#990000", linetype="dashed") +#q3
geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q3), colour="#990000", linetype="dashed") +#q2
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
}
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
}
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q1)), colour="#990000", linetype="dashed") +#q3
geom_hline(subset(thursday,variable==u[i]),aes(y=as.numeric(Q3)), colour="#990000", linetype="dashed") +#q2
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
}
u <- unique(thursday$variable) #Get all unique values for variable
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
sum<-summary(variable==u[i])
summStr <- paste(names(sum), format(sum, digits = 2), collapse = "; ")
title(sub = summStr, line=4, font.sub=1,cex.sub=.85)
}
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
sum<-summary(u[i])
summStr <- paste(names(sum), format(sum, digits = 2), collapse = "; ")
title(sub = summStr, line=4, font.sub=1,cex.sub=.85)
}
for(i in 1:length(u)) {
# I just put your data subset inside the plot
my_plots[[i]] = ggplot(subset(thursday,variable==u[i]),
aes(x = reorder(KGID, -mean), y = mean)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin=mean-sem, ymax=mean+sem))  +
# I deleted all your theme stuff to keep this minimal and
# easy to understand, you can add it back in
ylab("Mean") + xlab("ID") +
theme(axis.title.x = element_text(face="bold",size=16),
axis.text.x = element_text(angle=90, colour = "black", vjust=1, hjust = 1, size=14),
axis.text.y = element_text(colour = "black", size=14),
axis.title.y = element_text(face="bold", size=16),
plot.title = element_text(size = 18),
legend.title = element_text(size=14),
legend.text = element_text(size = 13),
legend.position="right",
strip.text.x = element_text(size=12, face="bold"),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour="black")) + ylab("Mean") + xlab("ID") + ggtitle(paste(u[i], "Intake (mg/kcal)", sep=" "))
}
my_plots[[1]]
for (i in 1:length(my_plots)) {
ggsave(filename = paste0("plot_", i, ".png"),
type="cairo",
units="in",
width=20,
height=15,
pointsize=12,
plot = my_plots[[i]])
}
summary(thursday$INOSITOL)
thursday$INOSITOL
summary(thursday)
head(thursday)
kg0222<-subset(thursday, thursday$variable=="INOSITOL")
kg0222<-subset(thursday, thursday$variable=="INOSITOL" $ thursday$KGID=="KG0222")
kg0222<-subset(thursday, thursday$variable=="INOSITOL" $ thursday$KGID==KG0222)
kg0222<-subset(thursday, thursday$variable=="INOSITOL" $ thursday$KGID==`KG0222`)
kg0222<-subset(thursday, thursday$variable=="INOSITOL" & thursday$KGID==`KG0222`)
kg0222<-subset(thursday, thursday$variable=="INOSITOL" & thursday$KGID=="KG0222")
view(kg0222)
View(kg0222)
head(dataframe7)
kg0222<-subset(dataframe7, dataframe7$KGID=="KG0222" & dataframe7$INOSITOL)
summary(kg0222)
head(kg0222)
View(kg0222)
kg0197<-subset(subset(dataframe7, dataframe7$KGID=="KG0197"), GLUCOSE)
kg0197<-subset(dataframe7, dataframe7$KGID=="KG0197")[,c("GLUCOSE")]
kg0197<-subset(dataframe7, dataframe7$KGID=="KG0197")
View(kg0197)
kg0206<-subset(dataframe7, dataframe7$KGID=="KG0206")
View(kg0206)
kg0205<-subset(dataframe7, dataframe7$KGID=="KG0205")
View(kg0205)
kg0207<-subset(dataframe7, dataframe7$KGID=="KG0207")
View(kg0207)
colnames(dataframe7)
dataframe_narm<-dataframe7[complete.cases(dataframe7),]
dataframe_narm_zerorm<-dataframe_narm[, colSums(dataframe_narm[,3:122]) != 0]
dataframe_narm_zerorm_infrm<-do.call(data.frame,lapply(dataframe_narm_zerorm, function(x) replace(x, is.infinite(x),NA)))
dataframe_narm_zerorm_infrm_narm1<-dataframe_narm_zerorm_infrm[complete.cases(dataframe_narm_zerorm_infrm),]
dataframe_narm_zerorm_infrm_narm2<-dataframe_narm_zerorm_infrm_narm1[, colSums(dataframe_narm_zerorm_infrm_narm1[,3:118]) != 0]
dataframe_narm_zerorm_infrm_narm3<-dataframe_narm_zerorm_infrm_narm2[, colSums(dataframe_narm_zerorm_infrm_narm2[,3:114]) != 0]
dataframeTEST<-dataframe_narm_zerorm_infrm_narm3[,-zeroVar(dataframe_narm_zerorm_infrm_narm3[,3:110], useNA = 'no')]
zeroVar <- function(data, useNA = 'ifany') {
out <- apply(data, 2, function(x) {length(table(x, useNA = useNA))})
which(out==1)
}
dataframeTEST2<-subset(dataframeTEST, select=-c(SUC_POLY,ISOMALT,LACTITOL,SUC_POLY,FLUOR ))
dataframeTEST<-dataframe_narm_zerorm_infrm_narm3[,-zeroVar(dataframe_narm_zerorm_infrm_narm3[,3:110], useNA = 'no')]
colnames(dataframeTEST)
dataframeTEST2<-subset(dataframeTEST, select=-c(SUC_POLY,ISOMALT,LACTITOL,SUC_POLY,FLUOR ))
fit<-prcomp(dataframeTEST2[,c(3:102)], scale=TRUE, drop=FALSE, na.omit=TRUE)
library(ggbiplot)
Patients<-dataframeTEST2$KGID
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,varname.size=3)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0))
pop_pca <- pop_pca + theme_bw()
pop_pca
# load ggbiplot
library(ggbiplot)
Patients<-dataframeTEST2$KGID
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)  + geom_facet(~KGID)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)  + facet_grid(~KGID)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)
pop_pca <- pop_pca + theme_bw()   + facet_grid(~Patients)
pop_pca
head(fit)
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE) + facet_grid(~Patients)
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE) + facet_wrap(~Patients)
pop_pca <- pop_pca + theme_bw()
pop_pca
timeperiods<-split(dataframeTEST2, dataframeTEST2$'X14_DAY_TIME_PERIODS')
library(data.table)
timeperiods2<-lapply(timeperiods,setDT) #convert all of your data.frames to data.tables
all_pos_var<-
lapply(timeperiods2,function(dt){
dt[,unlist(dt[,lapply(names(dt)[3:ncol(dt)],function(x){
if(diff(range(get(x)))!=0)x})]),with=F]
})
all_pos_pca<-
lapply(timeperiods2,function(dt){
dt[,unlist(dt[,lapply(names(dt)[3:ncol(dt)],function(x){
prcomp(x[3:ncol(x)], scale=TRUE, drop=FALSE, na.omit=TRUE)})])]
})
#close lapply
#Now, we will create a list of dataframes to prune
dataframe<-dataframe_cleaned
#Prune data to list of patients we want to keep
keeppatients <- data.frame( x =  c("KG0001","KG0009","KG0013","KG0020","KG0040","KG0041","KG0061","KG0065","KG0086","KG0087","KG0092","KG0110","KG0116","KG0129","KG0133","KG0154","KG0155","KG0157","KG0161","KG0162","KG0164","KG0172","KG0173","KG0174","KG0176","KG0180","KG0181","KG0187","KG0188","KG0189","KG0190","KG0191","KG0192","KG0194","KG0196","KG0197","KG0199","KG0202","KG0203","KG0204","KG0205","KG0206","KG0207","KG0208","KG0210","KG0212","KG0213","KG0214","KG0215","KG0217","KG0222","KG0223","KG0227","KG0228","KG0229"))
dataframe = dataframe[dataframe$KGID %in% keeppatients$x, ]
#Create list of dataframes
dataframe_list<-split(dataframe, dataframe$KGID)
#Which patient does my index correspond to?
unique(dataframe_list[[49]]$KGID)
#Prune each patient data set in the data frame list to the DOL indicated after DOL.
#For ease of viewing, I have separated the patients by blocks of 15.
dataframe_list[[1]]<-dataframe_list[[1]][(c(1:which(dataframe_list[[1]]$DOL == 7781))),]
dataframe_list[[2]]<-dataframe_list[[2]][(c(1:which(dataframe_list[[2]]$DOL == 6966))),]
dataframe_list[[3]]<-dataframe_list[[3]][(c(1:which(dataframe_list[[3]]$DOL == 9640))),]
dataframe_list[[4]]<-dataframe_list[[4]][(c(1:which(dataframe_list[[4]]$DOL == 7702))),]
dataframe_list[[5]]<-dataframe_list[[5]][(c(1:which(dataframe_list[[5]]$DOL == 6483))),]
dataframe_list[[6]]<-dataframe_list[[6]][(c(1:which(dataframe_list[[6]]$DOL == 6425))),]
dataframe_list[[7]]<-dataframe_list[[7]][(c(1:which(dataframe_list[[7]]$DOL == 6215))),]
dataframe_list[[8]]<-dataframe_list[[8]][(c(1:which(dataframe_list[[8]]$DOL == 5872))),]
dataframe_list[[9]]<-dataframe_list[[9]][(c(1:which(dataframe_list[[9]]$DOL == 8027))),]
dataframe_list[[10]]<-dataframe_list[[10]][(c(1:which(dataframe_list[[10]]$DOL == 5803))),]
dataframe_list[[11]]<-dataframe_list[[11]][(c(1:which(dataframe_list[[11]]$DOL == 4411))),]
dataframe_list[[12]]<-dataframe_list[[12]][(c(1:which(dataframe_list[[12]]$DOL == 3716))),]
dataframe_list[[13]]<-dataframe_list[[13]][(c(1:which(dataframe_list[[13]]$DOL == 5093))),]
dataframe_list[[14]]<-dataframe_list[[14]][(c(1:which(dataframe_list[[14]]$DOL == 6256))),]
dataframe_list[[15]]<-dataframe_list[[15]][(c(1:which(dataframe_list[[15]]$DOL == 4255))),]
dataframe_list[[16]]<-dataframe_list[[16]][(c(1:which(dataframe_list[[16]]$DOL == 3948))),]
dataframe_list[[17]]<-dataframe_list[[17]][(c(1:which(dataframe_list[[17]]$DOL == 5876))),]
dataframe_list[[18]]<-dataframe_list[[18]][(c(1:which(dataframe_list[[18]]$DOL == 4418))),]
dataframe_list[[19]]<-dataframe_list[[19]][(c(1:which(dataframe_list[[19]]$DOL == 3529))),]
dataframe_list[[20]]<-dataframe_list[[20]][(c(1:which(dataframe_list[[20]]$DOL == 3103))),]
dataframe_list[[21]]<-dataframe_list[[21]][(c(1:which(dataframe_list[[21]]$DOL == 2710))),]
dataframe_list[[22]]<-dataframe_list[[22]][(c(1:which(dataframe_list[[22]]$DOL == 1146))),]
dataframe_list[[23]]<-dataframe_list[[23]][(c(1:which(dataframe_list[[23]]$DOL == 1482))),]
dataframe_list[[24]]<-dataframe_list[[24]][(c(1:which(dataframe_list[[24]]$DOL == 10452))),]
dataframe_list[[25]]<-dataframe_list[[25]][(c(1:which(dataframe_list[[25]]$DOL == 3097))),]
dataframe_list[[26]]<-dataframe_list[[26]][(c(1:which(dataframe_list[[26]]$DOL == 5710))),]
dataframe_list[[27]]<-dataframe_list[[27]][(c(1:which(dataframe_list[[27]]$DOL == 6546))),]
dataframe_list[[28]]<-dataframe_list[[28]][(c(1:which(dataframe_list[[28]]$DOL == 2569))),]
dataframe_list[[29]]<-dataframe_list[[29]][(c(1:which(dataframe_list[[29]]$DOL == 817))),]
dataframe_list[[30]]<-dataframe_list[[30]][(c(1:which(dataframe_list[[30]]$DOL == 1441))),]
dataframe_list[[31]]<-dataframe_list[[31]][(c(1:which(dataframe_list[[31]]$DOL == 1932))),]
dataframe_list[[32]]<-dataframe_list[[32]][(c(1:which(dataframe_list[[32]]$DOL == 5890))),]
dataframe_list[[33]]<-dataframe_list[[33]][(c(1:which(dataframe_list[[33]]$DOL == 5426))),]
dataframe_list[[34]]<-dataframe_list[[34]][(c(1:which(dataframe_list[[34]]$DOL == 3929))),]
dataframe_list[[35]]<-dataframe_list[[35]][(c(1:which(dataframe_list[[35]]$DOL == 3032))),]
#dataframe_list[[36]]<-dataframe_list[[36]][(c(1:which(dataframe_list[[36]]$DOL == 3495))),] #we don't need to do this patient because the last day is already 3495
dataframe_list[[37]]<-dataframe_list[[37]][(c(1:which(dataframe_list[[37]]$DOL == 13203))),]
dataframe_list[[38]]<-dataframe_list[[38]][(c(1:which(dataframe_list[[38]]$DOL == 765))),]
dataframe_list[[39]]<-dataframe_list[[39]][(c(1:which(dataframe_list[[39]]$DOL == 1295))),]
dataframe_list[[40]]<-dataframe_list[[40]][(c(1:which(dataframe_list[[40]]$DOL == 2821))),]
#dataframe_list[[41]]<-dataframe_list[[41]][(c(1:which(dataframe_list[[41]]$DOL == 2984))),]
#dataframe_list[[42]]<-dataframe_list[[42]][(c(1:which(dataframe_list[[42]]$DOL == 3593))),]
#dataframe_list[[43]]<-dataframe_list[[43]][(c(1:which(dataframe_list[[43]]$DOL == 872))),]
#dataframe_list[[44]]<-dataframe_list[[44]][(c(1:which(dataframe_list[[44]]$DOL == 3243))),]
#dataframe_list[[45]]<-dataframe_list[[45]][(c(1:which(dataframe_list[[45]]$DOL == 901))),]
#dataframe_list[[46]]<-dataframe_list[[46]][(c(1:which(dataframe_list[[46]]$DOL == 8206))),]
#dataframe_list[[47]]<-dataframe_list[[47]][(c(1:which(dataframe_list[[47]]$DOL == 5970))),]
dataframe_list[[48]]<-dataframe_list[[48]][(c(1:which(dataframe_list[[48]]$DOL == 1212))),]
dataframe_list[[49]]<-dataframe_list[[49]][(c(1:which(dataframe_list[[49]]$DOL == 3924))),]
dataframe_list[[50]]<-dataframe_list[[50]][(c(1:which(dataframe_list[[50]]$DOL == 3032))),]
dataframe_list[[51]]<-dataframe_list[[51]][(c(1:which(dataframe_list[[51]]$DOL == 3456))),]
dataframe_list[[52]]<-dataframe_list[[52]][(c(1:which(dataframe_list[[52]]$DOL == 3468))),]
dataframe_list[[53]]<-dataframe_list[[53]][(c(1:which(dataframe_list[[53]]$DOL == 6169))),]
dataframe_list[[54]]<-dataframe_list[[54]][(c(1:which(dataframe_list[[54]]$DOL == 2276))),]
dataframe_list[[55]]<-dataframe_list[[55]][(c(1:which(dataframe_list[[55]]$DOL == 2041))),]
#Now, lets take each dataframe in the list and calculate averages
#How long do you want the average to be?
n <- 14 #number of days (it is really the number of rows, but R doesn't know the difference)
dataframe_list2<-lapply(dataframe_list, function(d) aggregate(.~DOL,
transform(d[sapply(d, is.numeric)],
DOL= as.numeric(gl(nrow(d), n, nrow(d)))),
FUN=mean, na.rm=TRUE, na.action=NULL))
#Unlist and make one dataframe
library(plyr)
dataframe3=ldply(dataframe_list2)
dataframe4<-rename(dataframe3, c(".id"="KGID", "DOL"="14_DAY_TIME_PERIODS"))
dataframe4<-dataframe4[,1:122]
zeroVar <- function(data, useNA = 'ifany') {
out <- apply(data, 2, function(x) {length(table(x, useNA = useNA))})
which(out==1)
}
#Remove days that are NA
dataframe_narm<-dataframe4[complete.cases(dataframe4),]
#Remove columns with zero sums
dataframe_narm_zerorm<-dataframe_narm[, colSums(dataframe_narm[,3:122]) != 0]
#infinite values?
dataframe_narm_zerorm_infrm<-do.call(data.frame,lapply(dataframe_narm_zerorm, function(x) replace(x, is.infinite(x),NA)))
#Remove days that are NA
dataframe_narm_zerorm_infrm_narm1<-dataframe_narm_zerorm_infrm[complete.cases(dataframe_narm_zerorm_infrm),]
#Remove columns with zero sums
dataframe_narm_zerorm_infrm_narm2<-dataframe_narm_zerorm_infrm_narm1[, colSums(dataframe_narm_zerorm_infrm_narm1[,3:118]) != 0]
#Remove columns with zero sums
dataframe_narm_zerorm_infrm_narm3<-dataframe_narm_zerorm_infrm_narm2[, colSums(dataframe_narm_zerorm_infrm_narm2[,3:114]) != 0]
#Remove columns with zero var
dataframeTEST<-dataframe_narm_zerorm_infrm_narm3[,-zeroVar(dataframe_narm_zerorm_infrm_narm3[,3:110], useNA = 'no')]
#Remove sucrose polyester and others that are not helpful because they are zero in the dataset
dataframeTEST2<-subset(dataframeTEST, select=-c(SUC_POLY,ISOMALT,LACTITOL,SUC_POLY,FLUOR ))
fit<-prcomp(dataframeTEST2[,c(3:102)], scale=TRUE, drop=FALSE, na.omit=TRUE)
# scale=T standardizes the variables to the same relative scale, avoiding some variables to become dominant just because of their large measurement units.
# run these two lines only if ggbiplot is not installed yet:
#library(devtools)
#install_github("ggbiplot", "vqv")
# load ggbiplot
library(ggbiplot)
Patients<-dataframeTEST2$KGID
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)
pop_pca <- pop_pca + theme_bw()
pop_pca
require(RColorBrewer)
brewer.pal(9, "Set1")
brewer.pal(12, "Set1")
colors<-("#E26A6A",
"#3CC32B",
"#8B6AE5",
"#5AB6B2",
"#535D1F",
"#534774",
"#E59025",
"#D73992",
"#589BDB",
"#53BB6F",
"#E34423",
"#D29DD3",
"#823F1E",
"#7D2B4E",
"#B6A729",
"#D14DE0",
"#7C2F79",
"#5B7C98",
"#A5728A",
"#2C533B",
"#986C1F",
"#E2376E",
"#BF74D0",
"#627FDE",
"#D26B36",
"#83BB30",
"#6249A0",
"#BF7859",
"#54844F",
"#E879B1",
"#3D8173",
"#88A242",
"#43B893",
"#A2A7D0",
"#61AECB",
"#47952F",
"#7E4140",
"#DF4246",
"#D645B8",
"#664B21",
"#D89A50",
"#AD9C4C",
"#7D7CBA",
"#9C2B20",
"#A23348",
"#385464",
"#DD838C",
"#31671F",
"#633F57",
"#7EB47C",
"#AE376D",
"#4FBF52",
"#A45287",
"#28538C",
"#976CA1")
colors<-("#E26A6A","#3CC32B","#8B6AE5","#5AB6B2","#535D1F","#534774","#E59025","#D73992","#589BDB","#53BB6F","#E34423","#D29DD3","#823F1E","#7D2B4E","#B6A729","#D14DE0","#7C2F79","#5B7C98","#A5728A","#2C533B","#986C1F","#E2376E","#BF74D0","#627FDE","#D26B36","#83BB30","#6249A0","#BF7859","#54844F","#E879B1","#3D8173","#88A242","#43B893","#A2A7D0","#61AECB","#47952F","#7E4140","#DF4246","#D645B8","#664B21","#D89A50","#AD9C4C","#7D7CBA","#9C2B20","#A23348","#385464","#DD838C","#31671F","#633F57","#7EB47C","#AE376D","#4FBF52","#A45287","#28538C","#976CA1")
colors<-c("#E26A6A","#3CC32B","#8B6AE5","#5AB6B2","#535D1F","#534774","#E59025","#D73992","#589BDB","#53BB6F","#E34423","#D29DD3","#823F1E","#7D2B4E","#B6A729","#D14DE0","#7C2F79","#5B7C98","#A5728A","#2C533B","#986C1F","#E2376E","#BF74D0","#627FDE","#D26B36","#83BB30","#6249A0","#BF7859","#54844F","#E879B1","#3D8173","#88A242","#43B893","#A2A7D0","#61AECB","#47952F","#7E4140","#DF4246","#D645B8","#664B21","#D89A50","#AD9C4C","#7D7CBA","#9C2B20","#A23348","#385464","#DD838C","#31671F","#633F57","#7EB47C","#AE376D","#4FBF52","#A45287","#28538C","#976CA1")
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)+
scale_colour_manual(values=colors)
pop_pca <- pop_pca + theme_bw()
pop_pca
Patients<-dataframeTEST2$KGID
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)+
scale_colour_manual(values=colors)+
guides(fill=guide_legend(ncol=2))
pop_pca <- pop_pca + theme_bw()
pop_pca
Patients<-dataframeTEST2$KGID
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=F,
varname.size=0, var.axes = FALSE)+
scale_colour_manual(values=colors)+guides(fill=guide_legend(nrow=2,byrow=TRUE))
pop_pca <- pop_pca + theme_bw()
pop_pca
Patients<-dataframeTEST2$KGID
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=F,circle=T,
varname.size=0, var.axes = FALSE)+
scale_colour_manual(values=colors)+guides(fill=guide_legend(nrow=2,byrow=TRUE))
pop_pca <- pop_pca + theme_bw()
pop_pca
pop_pca <- ggbiplot(fit,obs.scale = 1, var.scale=1,groups=Patients,ellipse=T,circle=T,
varname.size=0, var.axes = FALSE)+
scale_colour_manual(values=colors)+guides(fill=guide_legend(nrow=2,byrow=TRUE))
pop_pca <- pop_pca + theme_bw()
pop_pca
ggsave(filename = 14DAY_FOODOMICS_PCA,
type="cairo",
units="in",
width=20,
height=15,
pointsize=12)
ggsave(filename = 14DAY_FOODOMICS_PCA, type="cairo",units="in", width=20, height=15, pointsize=12)
ggsave(filename = FOURTEENDAY_FOODOMICS_PCA, type="cairo",units="in", width=20, height=15, pointsize=12)
ggsave(filename = "14DAY_FOODOMICS_PCA", type="cairo",units="in", width=20, height=15, pointsize=12)
ggsave(filename = "14DAY_FOODOMICS_PCA.png", type="cairo",units="in", width=20, height=15, pointsize=12)
getwd()
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
setwd("C:/Users/dlennon/Dropbox/_Research Program/Research Administration/Precision Ketogenic Therapy Network/PKTApp/11232015.release")
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
setwd("C:/Users/dlennon/Dropbox/_Research Program/Research Administration/Precision Ketogenic Therapy Network/PKTApp/11232015.release/www")
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
shiny::runApp('C:/Users/dlennon/Desktop/testapp')
